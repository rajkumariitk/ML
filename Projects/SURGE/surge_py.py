# -*- coding: utf-8 -*-
"""SURGE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uHpAs0SxhfAWdFkGi-IhOibItCHyqSe9
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os
import cv2

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/fer2013.csv')

data.head(20)

print(data)

X_train = []
X_test = []
y_train = []
y_test =  []

for index,row in data.iterrows():
  k = row['pixels'].split(" ")
  k = list(map(int, k))
  if row['Usage'] == 'Training':
    X_train.append(np.array(k))
    y_train.append(row['emotion'])
  elif row['Usage'] == 'PublicTest':
    X_test.append(np.array(k))
    y_test.append(row['emotion'])

X_train = np.array(X_train)
y_train = np.array(y_train)
X_test = np.array(X_test)
y_test = np.array(y_test)

X_train = X_train.reshape(X_train.shape[0],48,48,1)
X_test = X_test.reshape(X_test.shape[0],48,48,1)

X_train

X_test

X_train.shape

X_test.shape

Xtrain = X_train
Xtest= X_test

X_train = X_train.reshape(X_train.shape[0],48,48,1)
X_test = X_test.reshape(X_test.shape[0],48,48,1)

X_train.shape

X_test.shape

y_train

y_train[:7]

from keras.models import Sequential
from keras.layers.core import Flatten, Dense, Dropout
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from tensorflow.keras.optimizers import SGD

#y_train= tf.keras.utils.to_categorical(y_train, num_classes=7)
#y_test = tf.keras.utils.to_categorical(y_test, num_classes=7)

#y_train[:7]

#ytrain = np.argmax(y_train, axis=1)
#ytest = np.argmax(y_test, axis=1)

Xtrain.shape

from tensorflow import keras
from tensorflow.keras import datasets,layers,models

ann = keras.Sequential([
                        keras.layers.Flatten(input_shape =(48,48,1)),
                        keras.layers.Dense(3000,activation = 'relu'),
                        keras.layers.Dense(1000,activation = 'relu'),
                        keras.layers.Dense(7,activation = 'sigmoid')
])

ann.compile(optimizer= 'adam',
            loss = 'sparse_categorical_crossentropy',
            metrics = ['accuracy'])

ann.fit(X_train,y_train,epochs=5)

ann.evaluate(X_test,y_test)

cnn = models.Sequential([
                         
                         #cnn
                         layers.Conv2D(filters = 32,kernel_size = (3,3),activation='relu',input_shape = (48,48,1)),
                         layers.MaxPooling2D((2,2)),

                         layers.Conv2D(filters = 32,kernel_size = (3,3),activation='relu',input_shape = (48,48,1)),
                         layers.MaxPooling2D((2,2)),

                         layers.Conv2D(filters = 32,kernel_size = (3,3),activation='relu',input_shape = (48,48,1)),
                         layers.MaxPooling2D((2,2)),

                         layers.Conv2D(filters = 32,kernel_size = (3,3),activation='relu',input_shape = (48,48,1)),
                         layers.MaxPooling2D((2,2)),
                         

                         #Dense

                         layers.Flatten(),
                         layers.Dense(100,activation= 'relu'),
                         layers.Dense(7,activation='softmax')




])

cnn.compile(optimizer= 'adam',
            loss = 'sparse_categorical_crossentropy',
            metrics = ['accuracy'])

cnn.fit(X_train,y_train,epochs =10)

cnn.evaluate(X_test,y_test)

y_pred = cnn.predict(X_test)
y_pred[:5]

y_classes = [np.argmax(element) for element in y_pred]
y_test[:10]

from sklearn.metrics import confusion_matrix,classification_report

print("classificaton Report: \n",classification_report(y_test,y_classes))

cm = tf.math.confusion_matrix(labels = y_test,predictions = y_classes)
cm

import seaborn as sns
plt.figure(figsize = (10,7))
sns.heatmap(cm,annot = True,fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Truth')

from tensorflow.keras.models import Model
from tensorflow.keras.models import load_model

model = cnn()

